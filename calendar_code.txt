import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Modal,
  TextInput,
  StyleSheet,
  ScrollView,
  FlatList,
  Alert
} from 'react-native';
import { Picker } from '@react-native-picker/picker';
import SERVER_URL from "../../../config";

type Note = {
  item: string;
  quantity: number;
};

const ActivityScreen = ({ route }: any) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState<string | null>(null);
  const [notes, setNotes] = useState<{ [date: string]: Note[] }>({});
  const [dataModalVisible, setDataModalVisible] = useState(false);
  const [inputModalVisible, setInputModalVisible] = useState(false);
  const [staticItems, setStaticItems] = useState([
    { name: 'Apples', type: "", unit_price: 1, upper_limit: 1, id: 0 },
  ])
  const [selectedItem, setSelectedItem] = useState(staticItems[0].name);
  const [inputQuantity, setInputQuantity] = useState('');

  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  const firstDayOfMonth = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();

  const changeMonth = (direction: 'next' | 'prev') => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + (direction === 'next' ? 1 : -1));
    setCurrentDate(newDate);
  };

  const openDataModal = (day: number) => {
    const dateStr = `${year}-${month + 1}-${day}`;
    setSelectedDate(dateStr);
    setDataModalVisible(true);
  };

  const openInputModal = (day: number) => {
    const dateStr = `${year}-${month + 1}-${day}`;
    setSelectedDate(dateStr);
    setSelectedItem(staticItems[0].name);
    setInputQuantity('');
    setInputModalVisible(true);
  };

  const saveInput = () => {
    if (selectedDate && selectedItem && inputQuantity) {
      setNotes((prev) => ({
        ...prev,
        [selectedDate]: [
          ...(prev[selectedDate] || []),
          { item: selectedItem, quantity: parseInt(inputQuantity) },
        ],
      }));
    }
    setInputModalVisible(false);
  };

  const renderCalendar = () => {
    const calendarItems = [];

    for (let i = 0; i < firstDayOfMonth; i++) {
      calendarItems.push(<View key={`blank-${i}`} style={styles.dayBlank} />);
    }

    for (let day = 1; day <= daysInMonth; day++) {
      const dateStr = `${year}-${month + 1}-${day}`;
      const data = notes[dateStr];

      calendarItems.push(
        <TouchableOpacity
          key={dateStr}
          style={[styles.day, data && styles.daySelected]}
          onPress={() => openDataModal(day)}
          onLongPress={() => openInputModal(day)}
        >
          <Text style={styles.dayText}>{day}</Text>
          {data && data.map((ele, idx) => (
            <Text key={idx} style={styles.noteText}>{`${ele.item} ${ele.quantity}`}</Text>
          ))}
        </TouchableOpacity>
      );
    }

    return calendarItems;
  };

  const { employee } = route.params;
  // Alert.alert(`employee: ${employee.name}`)
  const [incentives, setIncentives] = useState([
    { name: "", type: "", unit_price: 0, upper_limit: 0 }
  ]);

  const init = async () => {
    try {
      const response = await fetch(`${SERVER_URL}api/incentive/`, {
        method: 'GET',
        headers: {
          "Content-Type": "application/json"
        }
      });

      const data = await response.json();

      let arr = [];

      const emp = await fetch(`${SERVER_URL}api/staff/`, {
        method: 'GET',
        headers: {
          "Content-Type": "application/json"
        }
      });

      const empData = await emp.json();

      let role = "";

      for (let i = 0; i < empData.length; i++) {
        if (empData[i].name != employee.name) continue;
        role = empData[i].type;
        break;
      }

      for (let i = 0; i < data.length; i++) {
        if (data[i].type !== `${role}用`) continue;
        arr.push({
          name: data[i].name,
          type: data[i].type,
          unit_price: data[i].unit_price,
          upper_limit: data[i].upper_limit,
          id: i,
        });
      }

      setIncentives([...arr]);
      setStaticItems([...arr]);
    } catch (err) {
      Alert.alert(`error: ${err}`);
    }
  }

  useEffect(() => {
    init();
  }, []);

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>{`${year} - ${month + 1}`}</Text>

      <View style={styles.controls}>
        <TouchableOpacity onPress={() => changeMonth('prev')} style={styles.controlButton}>
          <Text>← Prev</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => changeMonth('next')} style={styles.controlButton}>
          <Text>Next →</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.weekdays}>
        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (
          <Text key={day} style={styles.weekdayText}>{day}</Text>
        ))}
      </View>

      <View style={styles.calendar}>{renderCalendar()}</View>

      {/* Data View Modal */}
      <Modal visible={dataModalVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            {/* <Text style={styles.modalTitle}>Data on {selectedDate}</Text>
            {notes[selectedDate || ''] ? (
              <Text>
                {notes[selectedDate || ''].item} - {notes[selectedDate || ''].quantity}
              </Text>
            ) : (
              <Text>No data found.</Text>
            )} */}

            <View style={styles.table}>
              <View style={styles.tableRowHeader}>
                <Text style={styles.tableHeader}>インセンティブ項目</Text>
                <Text style={styles.tableHeader}>上限回数</Text>
                <Text style={styles.tableHeader}>単価</Text>
                <Text style={styles.tableHeader}></Text>
              </View>

              {incentives.length > 0 && incentives.map((incentive, index) => (
                <View key={index} style={styles.tableRow}>
                  <Text style={styles.tableCell}>{incentive.name}</Text>
                  <Text style={styles.tableCell}>{incentive.upper_limit}</Text>
                  <Text style={styles.tableCell}>{incentive.unit_price}</Text>
                  <Text style={styles.tableCell}></Text>
                </View>
              ))}
              {incentives.length == 0 &&
                <View style={styles.tableRow}>
                  <Text style={styles.tablenone}>登録された項目はありません。</Text>
                </View>
              }
            </View>

            <TouchableOpacity onPress={() => setDataModalVisible(false)} style={styles.cancelButton}>
              <Text style={styles.cancelText}>Close</Text>
            </TouchableOpacity>
          </View>
        </View>

      </Modal>

      {/* Input Modal */}
      <Modal visible={inputModalVisible} transparent animationType="fade">
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Add Data on {selectedDate}</Text>

            <Picker
              selectedValue={selectedItem}
              onValueChange={(itemValue) => setSelectedItem(itemValue)}
              style={styles.picker}
            >
              {staticItems.map((item) => (
                <Picker.Item key={item.id} label={item.name} value={item.name} />
              ))}
            </Picker>

            <TextInput
              value={inputQuantity}
              onChangeText={setInputQuantity}
              placeholder="Quantity"
              keyboardType="numeric"
              style={styles.input}
            />

            <TouchableOpacity onPress={saveInput} style={styles.saveButton}>
              <Text style={styles.saveText}>Save</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => setInputModalVisible(false)} style={styles.cancelButton}>
              <Text style={styles.cancelText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { padding: 16, alignItems: 'center', backgroundColor: "#FFFFFF", height: "100%" },
  title: { fontSize: 24, marginBottom: 12 },
  controls: { flexDirection: 'row', marginBottom: 12 },
  controlButton: {
    marginHorizontal: 10,
    padding: 8,
    backgroundColor: '#eee',
    borderRadius: 8,
  },
  weekdays: {
    flexDirection: 'row',
    width: '100%',
    justifyContent: 'space-around',
    marginBottom: 4,
  },
  weekdayText: { width: 45, textAlign: 'center', fontWeight: 'bold' },
  calendar: { flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'flex-start' },
  day: {
    width: 45,
    height: 90,
    borderWidth: 1,
    borderColor: '#ccc',
    margin: 2,
    padding: 4,
    borderRadius: 6,
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  daySelected: { backgroundColor: '#2B5DAE' },
  dayBlank: { width: 45, height: 70, margin: 2 },
  dayText: { fontWeight: 'bold', fontSize: 14 },
  noteText: { marginTop: 4, fontSize: 8, textAlign: 'center', color: '#FFFFFF' },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    padding: 20,
    width: '90%',
    borderRadius: 12,
    elevation: 10,
  },
  modalTitle: { fontSize: 18, marginBottom: 12, fontWeight: 'bold' },
  input: {
    borderWidth: 1,
    borderColor: '#aaa',
    padding: 8,
    marginBottom: 12,
    borderRadius: 6,
  },
  saveButton: {
    backgroundColor: '#2B5DAE',
    padding: 10,
    borderRadius: 6,
    alignItems: 'center',
    marginBottom: 8,
  },
  saveText: { color: '#FFFFFF', fontWeight: 'bold' },
  cancelButton: {
    backgroundColor: '#eee',
    padding: 10,
    borderRadius: 6,
    alignItems: 'center',
  },
  cancelText: { color: '#333', fontWeight: '600' },
  picker: {
    borderWidth: 1,
    borderColor: '#aaa',
    marginBottom: 12,
  },
  table: {
    borderWidth: 1,
    borderColor: "#000",
    marginBottom: 15,
  },
  tableRowHeader: {
    flexDirection: "row",
    backgroundColor: "#2B5DAE",
    paddingVertical: 8,
  },
  tableHeader: {
    flex: 1,
    color: "#FFFFFF",
    fontWeight: "bold",
    textAlign: "center",
  },
  tableRow: {
    flexDirection: "row",
    borderBottomWidth: 1,
    borderBottomColor: "#000",
    paddingVertical: 5,
    alignItems: "center"
  },
  tableCell: {
    flex: 1,
    textAlign: "center",
    paddingVertical: 3,
    borderWidth: 0,
    borderColor: "#ccc",
    borderRadius: 4,
    marginHorizontal: 4,
  },
  tablenone: {
    flex: 1,
    textAlign: "left",
    marginLeft: 30
  },
  inputCell: {
    flex: 1,
    textAlign: "center",
    paddingVertical: 2,
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 4,
    marginHorizontal: 4,
  },
  scrollContent: {
    paddingHorizontal: 15,
    paddingVertical: 20,
    paddingBottom: 100, // extra space for fixed buttons
  },
});

export default ActivityScreen;
